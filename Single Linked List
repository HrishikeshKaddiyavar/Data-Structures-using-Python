# single linked list using python with crud (create, read, update, delete) operations

"""
A basic implementation of a single linked list in Python, supporting CRUD operations:

Insert Node: Add new nodes to the list.
Print Nodes: Display all nodes in the list.
Delete Node: Remove a specified node from the list.
Update Node: Update the data of a specified node.
"""

class Node:
    def __init__(self, data = None, next = None):
        self.data = data
        self.next = next
        
class SingleLinkedList:
    def __init__(self):
        self.first_node = self.current_node = Node()
        
    def insertNode(self):
        data = input("Enter the data: ")
        # inserting first node
        if (self.first_node.data is None):
            self.first_node.data = data
            self.current_node = self.first_node
        # inserting other node
        else:
            self.new_node = Node()
            self.new_node.data = data
            self.current_node.next = self.new_node
            self.current_node = self.new_node
            
    def printNode(self):
        self.current_node = self.first_node
        print()
        while (self.current_node is not None):
            print(self.current_node.data, end=" -> ")
            self.current_node = self.current_node.next
        print("Node Ended")
        
    def updateNode(self):
        current_data = input("Enter the current data: ")
        new_data = input("Enter the new data: ")
        self.current_node = self.first_node
        while (self.current_node is not None):
            if (self.current_node.data == old_data):
                self.current_node.data = data
            self.current_node = self.current_node.next
    
    def deleteNode(self):
        data = input("Enter the data: ")
        self.current_node = self.first_node
        # deleting node at beginning
        if (self.current_node.data == data):
            self.first_node = self.first_node.next
        # deleting node at middle
        else:
            self.previous_node = Node()
            self.previous_node = self.current_node
            self.current_node = self.current_node.next
            while (self.current_node is not None):
                if (self.current_node.data == data):
                    self.previous_node.next = self.current_node.next
                self.previous_node = self.previous_node.next
                self.current_node = self.current_node.next
    
    def isEmpty(self):
        if (self.first_node.data is None): return True
        else: return False
        
object = SingleLinkedList()

print("Welcome to Single Linked List Operation")
print("""
Operations Menu:
  1. Insert Node (c)
  2. Print Node (r)
  3. Update Node (u)
  4. Delete Node (d)
  5. Exit the Operation (e)
""")

while (True):
    if (object.isEmpty()):
        object.insertNode()
    else:
        choice = input("Enter the option: [c/r/u/d/e] ")
        if (choice == 'c'): object.insertNode()
        elif (choice == 'r'): object.printNode()
        elif (choice == 'u'): object.updateNode()
        elif (choice == 'd'): object.deleteNode()
        elif (choice == 'e'): break
        else: print("Enter valid options among [")
